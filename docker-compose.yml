# docker-compose.yml
version: '3.8'

# 애플리케이션의 각 서비스(컨테이너)를 정의합니다.
services:
  # Nginx 서비스: 리버스 프록시 역할을 수행합니다.
  nginx:
    image: nginx:alpine # 가벼운 Alpine 기반의 Nginx 이미지를 사용합니다.
    container_name: nginx_sb # 컨테이너 이름을 명확하게 지정합니다.
    ports:
      - "80:80" # 호스트의 80번 포트를 컨테이너의 80번 포트로 연결합니다.
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro # Nginx 설정 파일을 읽기 전용으로 마운트합니다.
    depends_on:
      - nodejs # Node.js 서비스가 시작된 후에 Nginx가 실행되도록 합니다.
    networks:
      - network_sb # 사용자 정의 네트워크에 연결합니다.

  # Node.js 애플리케이션 서비스
  nodejs:
    build: ./nodejs # 'nodejs' 디렉토리의 Dockerfile을 사용하여 이미지를 빌드합니다.
    container_name: nodejs_sb # 컨테이너 이름을 명확하게 지정합니다.
    environment:
      # .env 파일에 정의된 환경 변수들을 사용하여 DB 연결 정보를 전달합니다.
      PG_USER: ${PG_USER} 
      PG_HOST: ${PG_HOST} 
      PG_DATABASE: ${PG_DATABASE} 
      PG_PASSWORD: ${PG_PASSWORD} 
      PG_PORT: ${PG_PORT} 
    depends_on:
      - postgresql # PostgreSQL 서비스가 시작된 후에 Node.js가 실행되도록 합니다.
    networks:
      - network_sb # 사용자 정의 네트워크에 연결합니다.

  # PostgreSQL 데이터베이스 서비스
  postgresql:
    image: postgres:14-alpine # 가벼운 PostgreSQL 14 Alpine 이미지를 사용합니다.
    container_name: postgresql_sb # 컨테이너 이름을 명확하게 지정합니다.
    ports: 
      - 5432:5432 # 데이터베이스 포트를 호스트에 노출합니다.
    environment:
      # .env 파일의 환경 변수를 사용하여 데이터베이스를 설정합니다.
      POSTGRES_USER: ${PG_USER} 
      POSTGRES_PASSWORD: ${PG_PASSWORD} 
      POSTGRES_DB: ${PG_DATABASE} 
      
    volumes:
      - postgres-data:/var/lib/postgresql/data # 데이터 영속성을 위해 'postgres-data' 볼륨을 마운트합니다.
      - ./postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro # 컨테이너 시작 시 init.sql 스크립트를 실행합니다.
    networks:
      - network_sb # 사용자 정의 네트워크에 연결합니다.

# 데이터 영속성을 위한 명명된 볼륨을 정의합니다.
volumes:
  postgres-data:

# 서비스 간 통신을 위한 사용자 정의 브리지 네트워크를 정의합니다.
networks:
  network_sb:
    driver: bridge



# 실행 
# docker-compose up -d
# docker-compose up --build -d
# 컨테이너 재시작
# docker-compose restart [서비스명]
# docker-compose restart
# 중지 
# docker-compose down
# 빌드
# docker-compose build 
# pull
# docker-compose pull
# 프로세스 확인
# docker-compose ps
# 명령어 실행 bash 
# docker-compose exec [서비스명] [명령어]
# docker-compose exec web bash
# 로그 
# docker-compose logs
# docker-compose logs -f