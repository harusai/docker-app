# docker-compose.yml
version: '3.8'

# 애플리케이션의 각 서비스(컨테이너)를 정의합니다.
services:
############################################# NGINX  ####################################################
  # Nginx 서비스: 리버스 프록시 역할을 수행합니다.
  nginx:
    image: nginx:alpine # 가벼운 Alpine 기반의 Nginx 이미지를 사용합니다.
    container_name: nginx_sb # 컨테이너 이름을 명확하게 지정합니다.
    ports:
      - "80:80" # 호스트의 80번 포트를 컨테이너의 80번 포트로 연결합니다.
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro # Nginx 설정 파일을 읽기 전용으로 마운트합니다.
    depends_on:
      # - mbe-sbcom # backend nodejs 공통 서비스가 시작된 후에 Nginx가 실행되도록 합니다.
      # - mbe-sbcef # backend nodejs sbcefserv
      # - mbe-sbasl # backend nodejs sbaslserv
      # - mfe-sbcom # sbcom host front framework 뼈대가 될 서비스
      # - mfe-sbcef  # sbcom 뼈대 서비스에 로드될 sbcef 서비스 
      # - sbasl  # sbcom 뼈대 서비스에 로드될 sbasl 서비스 
      mbe-sbcom:
        condition: service_healthy # mbe-sbcom 서비스가 준비될 때까지 기다립니다.
      mbe-sbcef:
        condition: service_healthy # mbe-sbcef 서비스가 준비될 때까지 기다립니다.
      mbe-sbasl:
        condition: service_healthy # mbe-sbasl 서비스가 준비될 때까지 기다립니다.
      mfe-sbcom:
        condition: service_started
      mfe-sbcef:
        condition: service_started
    networks:
      - network_sb # 사용자 정의 네트워크에 연결합니다.

############################################# micro front service ####################################################
  # React 애플리케이션 서비스
  mfe-sbcom:
    build:
      context: ./frontend
      dockerfile: sbcom/Dockerfile # pnpm workspace의 sbcom 디렉터리에 있는 Dockerfile을 사용합니다.
    container_name: mfe-sbcom
    ports:
      - "5000:80"
    networks:
      - network_sb # 사용자 정의 네트워크에 연결합니다.

  mfe-sbcef:
    build:
      context: ./frontend 
      dockerfile: sbcef/Dockerfile
    container_name: mfe-sbcef
    ports:
      - "5100:80"
    networks:
      - network_sb # 사용자 정의 네트워크에 연결합니다.



############################################# micro services ####################################################
  # Node.js 애플리케이션 서비스
  mbe-sbcom:
    build: 
      context: ./backend/sbcom
      dockerfile: Dockerfile
      args:
        - DATABASE_URL=${DATABASE_URL}      # 빌드 시점에 사용할 환경 변수(빌드타임) PRISMA에서 사용 
    container_name: mbe-sbcom # 컨테이너 이름을 명확하게 지정합니다.
    environment:
      # Node.js 애플리케이션에서 사용할 환경 변수를 설정합니다.(런타임)
      # .env 파일에 정의된 환경 변수들을 사용하여 DB 연결 정보를 전달합니다.
      PG_USER: ${PG_USER} 
      PG_HOST: ${PG_HOST} 
      PG_DATABASE: ${PG_DATABASE} 
      PG_PASSWORD: ${PG_PASSWORD} 
      PG_PORT: ${PG_PORT} 
    depends_on:
      db-init:
        condition: service_completed_successfully
      postgresql:
        condition: service_healthy
      #- postgresql # PostgreSQL 서비스가 시작된 후에 Node.js가 실행되도록 합니다.
      # db:setup 스크립트가 성공적으로 실행되지 않아도 컨테이너가 계속 실행되도록 설정합니다.
    # command: sh -c "npm run db:setup || true && npm start"
    # command: sh -c "npm run db:setup; tail -f /dev/null"
    command: >
      sh -c "
      until PGPASSWORD=$$PG_PASSWORD pg_isready -h $$PG_HOST -p $$PG_PORT -U $$PG_USER -d $$PG_DATABASE; do
        echo 'Waiting for database to be ready...'
        sleep 1
      done &&
      npm start"
    # command: npm start
    networks:
      - network_sb # 사용자 정의 네트워크에 연결합니다.
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:3000/index"] # /index 엔드포인트로 서버 상태 확인
      interval: 10s # 10초마다 체크
      timeout: 5s # 타임아웃 5초
      retries: 5 # 5번 실패하면 비정상으로 간주

# SB_CEF
  mbe-sbcef:
    build:
      context: ./backend/sbcef
      dockerfile: Dockerfile
      args:
        - DATABASE_URL=${DB_CEF_URL}      # 빌드 시점에 사용할 환경 변수(빌드타임) PRISMA에서 사용 
    container_name: mbe-sbcef
    environment:
      # 사용자 서비스에 필요한 환경 변수를 정의합니다.
      PG_USER: ${PG_USER}
      PG_HOST: ${PG_HOST}
      PG_DATABASE: ${PG_DATABASE}
      PG_PASSWORD: ${PG_PASSWORD}
      PG_PORT: ${PG_PORT}
    depends_on:
      db-init:
        condition: service_completed_successfully
      postgresql:
        condition: service_healthy
    # command: sh -c "npm run db:setup || true && npm start"
    # command: sh -c "npm run db:setup; tail -f /dev/null"
    command: >
      sh -c "
      until PGPASSWORD=$$PG_PASSWORD pg_isready -h $$PG_HOST -p $$PG_PORT -U $$PG_USER -d $$PG_DATABASE; do
        echo 'Waiting for database to be ready...'
        sleep 1
      done &&
      npm start"
    # command: npm start
    networks:
      - network_sb
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:3100/index"] # /index 엔드포인트로 서버 상태 확인
      interval: 10s # 10초마다 체크
      timeout: 5s # 타임아웃 5초
      retries: 5 # 5번 실패하면 비정상으로 간주

  # SB_ASL
  mbe-sbasl:
    build:
      context: ./backend/sbasl
      dockerfile: Dockerfile
      args:
        - DATABASE_URL=${DB_ASL_URL}      # 빌드 시점에 사용할 환경 변수(빌드타임) PRISMA에서 사용 
    container_name: mbe-sbasl
    environment:
      # 주문 서비스에 필요한 환경 변수를 정의합니다.
      PG_USER: ${PG_USER}
      PG_HOST: ${PG_HOST}
      PG_DATABASE: ${PG_DATABASE}
      PG_PASSWORD: ${PG_PASSWORD}
      PG_PORT: ${PG_PORT}
    depends_on:
      db-init:
        condition: service_completed_successfully
      postgresql:
        condition: service_healthy
    # command: sh -c "npm run db:setup || true && npm start"
    #command: sh -c "npm run db:setup; tail -f /dev/null"
    command: >
      sh -c "
      until PGPASSWORD=$$PG_PASSWORD pg_isready -h $$PG_HOST -p $$PG_PORT -U $$PG_USER -d $$PG_DATABASE; do
        echo 'Waiting for database to be ready...'
        sleep 1
      done &&
      npm start"
    #command: npm start
    networks:
      - network_sb
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:3200/index"] # /index 엔드포인트로 서버 상태 확인
      interval: 10s # 10초마다 체크
      timeout: 5s # 타임아웃 5초
      retries: 5 # 5번 실패하면 비정상으로 간주

############################################# PostgreSQL 데이터베이스  ####################################################

  # 데이터베이스 초기화 서비스
  db-init:
    image: node:22-alpine # Prisma와 psql을 실행하기 위해 Node.js 이미지를 사용
    container_name: db_init_sb
    volumes:
      - ./backend/sbcom:/app/backend/sbcom
      - ./backend/sbcef:/app/backend/sbcef
      - ./backend/sbasl:/app/backend/sbasl
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DATABASE}
      DATABASE_URL: ${DATABASE_URL}
      DB_CEF_URL: ${DB_CEF_URL}
      DB_ASL_URL: ${DB_ASL_URL}
    depends_on:
      postgresql:
        condition: service_healthy
    # command: sh -c "apk add --no-cache postgresql-client && until PGPASSWORD=$$POSTGRES_PASSWORD pg_isready -h postgresql -p 5432 -U $$POSTGRES_USER -d postgres; do echo 'Waiting for postgresql to be ready...'; sleep 1; done && PGPASSWORD=$$POSTGRES_PASSWORD psql -h postgresql -U $$POSTGRES_USER -d postgres -c 'CREATE DATABASE \"Southbottle\";' && PGPASSWORD=$$POSTGRES_PASSWORD psql -h postgresql -U $$POSTGRES_USER -d $$POSTGRES_DB -c 'CREATE SCHEMA IF NOT EXISTS SBCOM; CREATE SCHEMA IF NOT EXISTS SBCEF; CREATE SCHEMA IF NOT EXISTS SBASL; CREATE SCHEMA IF NOT EXISTS Southbottle;' && cd /app/backend/sbcom && npm install && DATABASE_URL=$$DATABASE_URL npm run db:setup && cd /app/backend/sbcef && npm install && DATABASE_URL=$$DB_CEF_URL npm run db:setup && cd /app/backend/sbasl && npm install && DATABASE_URL=$$DB_ASL_URL npm run db:setup && echo 'Database initialization complete.'"
    # command: sh -c "apk add --no-cache postgresql-client && until PGPASSWORD=$$POSTGRES_PASSWORD pg_isready -h postgresql -p 5432 -U $$POSTGRES_USER -d postgres; do echo 'Waiting for postgresql to be ready...'; sleep 1; done && PGPASSWORD=$$POSTGRES_PASSWORD psql -h postgresql -U $$POSTGRES_USER -d postgres -c 'CREATE DATABASE \"Southbottle\";' && PGPASSWORD=$$POSTGRES_PASSWORD psql -h postgresql -U $$POSTGRES_USER -d $$POSTGRES_DB -c 'CREATE SCHEMA IF NOT EXISTS SBCOM; CREATE SCHEMA IF NOT EXISTS SBCEF; CREATE SCHEMA IF NOT EXISTS SBASL; CREATE SCHEMA IF NOT EXISTS Southbottle;' && cd /app/backend/sbcom && npm install && DATABASE_URL=$$DATABASE_URL npm run db:setup && cd /app/backend/sbcef && npm install && DATABASE_URL=$$DB_CEF_URL npm run db:setup && cd /app/backend/sbasl && npm install && DATABASE_URL=$$DB_ASL_URL npm run db:setup && echo 'Database initialization complete.'"
    # command: sh -c "apk add --no-cache postgresql-client && until PGPASSWORD=$$POSTGRES_PASSWORD pg_isready -h postgresql -p 5432 -U $$POSTGRES_USER -d $$POSTGRES_DB; do echo 'Waiting for postgresql to be ready...'; sleep 1; done && PGPASSWORD=$$POSTGRES_PASSWORD psql -h postgresql -U $$POSTGRES_USER -d $$POSTGRES_DB -c 'CREATE SCHEMA IF NOT EXISTS \"SBCOM\"; CREATE SCHEMA IF NOT EXISTS \"SBCEF\"; CREATE SCHEMA IF NOT EXISTS \"SBASL\"; CREATE SCHEMA IF NOT EXISTS \"Southbottle\";' && cd /app/backend/sbcom && npm install && DATABASE_URL=$$DATABASE_URL npm run db:setup && cd /app/backend/sbcef && npm install && DATABASE_URL=$$DB_CEF_URL npm run db:setup && cd /app/backend/sbasl && npm install && DATABASE_URL=$$DB_ASL_URL npm run db:setup && echo 'Database initialization complete.'"
    command : >
      sh -c "
        apk add --no-cache postgresql-client &&
        until PGPASSWORD=$$POSTGRES_PASSWORD pg_isready -h postgresql -p 5432 -U $$POSTGRES_USER -d $$POSTGRES_DB; do
          echo 'Waiting for postgresql to be ready...'
          sleep 1
        done &&
        if ! PGPASSWORD=$$POSTGRES_PASSWORD psql -h postgresql -p 5432 -U $$POSTGRES_USER -d $$POSTGRES_DB -c '\\dt \"SBCOM\".\"SBCOM_COMPANY\"' | grep -q 'SBCOM_COMPANY'; then
          echo 'Database tables not found. Initializing...' &&
          PGPASSWORD=$$POSTGRES_PASSWORD psql -h postgresql -p 5432 -U $$POSTGRES_USER -d $$POSTGRES_DB -c 'CREATE SCHEMA IF NOT EXISTS \"SBCOM\"; CREATE SCHEMA IF NOT EXISTS \"SBCEF\"; CREATE SCHEMA IF NOT EXISTS \"SBASL\"; CREATE SCHEMA IF NOT EXISTS \"Southbottle\";' &&
          cd /app/backend/sbcom && npm install && DATABASE_URL=$$DATABASE_URL npm run db:setup &&
          cd /app/backend/sbcef && npm install && DATABASE_URL=$$DB_CEF_URL npm run db:setup &&
          cd /app/backend/sbasl && npm install && DATABASE_URL=$$DB_ASL_URL npm run db:setup &&
          echo 'Database initialization complete.'
        else
          echo 'Database already initialized. Skipping setup.'
        fi"
    networks:
      - network_sb

  # PostgreSQL 데이터베이스 서비스
  postgresql:
    image: postgres:14-alpine # 가벼운 PostgreSQL 14 Alpine 이미지를 사용합니다.
    container_name: postgresql_sb # 컨테이너 이름을 명확하게 지정합니다.
    ports: 
      - 5432:5432 # 데이터베이스 포트를 호스트에 노출합니다.
    environment:
      # .env 파일의 환경 변수를 사용하여 데이터베이스를 설정합니다.
      POSTGRES_USER: ${PG_USER} 
      POSTGRES_PASSWORD: ${PG_PASSWORD} 
      POSTGRES_DB: ${PG_DATABASE} 
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

    volumes:
      - postgres-data:/var/lib/postgresql/data # 데이터 영속성을 위해 'postgres-data' 볼륨을 마운트합니다.
      #- ./postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro # 컨테이너 시작 시 init.sql 스크립트를 실행합니다.
    networks:
      - network_sb # 사용자 정의 네트워크에 연결합니다.

# 데이터 영속성을 위한 명명된 볼륨을 정의합니다.
volumes:
  postgres-data:

# 서비스 간 통신을 위한 사용자 정의 브리지 네트워크를 정의합니다.
networks:
  network_sb:
    driver: bridge